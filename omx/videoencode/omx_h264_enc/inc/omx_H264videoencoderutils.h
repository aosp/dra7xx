/*
 * Copyright (C) Texas Instruments - http://www.ti.com/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <string.h>

#include <OMX_Core.h>
#include <OMX_Component.h>
#include <OMX_TI_Custom.h>

#include <omx_base.h>
#include <omx_base_utils.h>

#include <xdc/std.h>
#include <ti/sdo/ce/video2/videnc2.h>
#include <ti/sdo/codecs/h264enc/ih264enc.h>

/* For Baseline Profile :: FLAG to indicate Constrained Baseline profile in the Bitstream generated by codec
conforming to the H264Standard */
#define OMX_H264_SET_CONSTRAINT_SET1_FLAG 0x14
#define OMX_H264_DISBALE_ALL_CONSTRAINT_SET_FLAGS 0x0

/* OMX Component Version */
#define OMX_H264VE_COMP_VERSION_MAJOR 1

#define OMX_H264VE_COMP_VERSION_MINOR 1

#define OMX_H264VE_COMP_VERSION_REVISION 0

#define OMX_H264VE_COMP_VERSION_STEP 0

/* OMX Component port numbers */
#define  OMX_H264VE_NUM_PORTS     (2)

#define  OMX_H264VE_DEFAULT_START_PORT_NUM (0)

#define OMX_H264VE_INPUT_PORT (0)

#define OMX_H264VE_OUTPUT_PORT (1)

/* OMX Component thread related */
#define OMX_H264VE_DEFAULT_TASKPRIORITY (10)

#define OMX_H264VE_STACKSIZE (1024 * 100)

/* OMX Component and Encoder Name */
#define OMX_H264VE_COMP_NAME "OMX.TI.DUCATI1.VIDEO.H264E"

#define OMX_H264V_ENCODER_NAME "ivahd_h264enc"

/* Default Interframe intervals */
#define OMX_H264VE_DEFAULT_INTERFRAME_INTERVAL (3)

#define OMX_H264VE_BASELINE_INTERFRAME_INTERVAL (1)

/* OMX Component Buffer defaults */
#define OMX_H264VE_MIN_OUTPUT_BUFFER_COUNT (2)

#define OMX_H264VE_DEFAULT_OUTPUT_BUFFER_COUNT (OMX_H264VE_MIN_OUTPUT_BUFFER_COUNT + 2)

#define OMX_H264VE_MIN_INPUT_BUFFER_COUNT (OMX_H264VE_DEFAULT_INTERFRAME_INTERVAL)

#define OMX_H264VE_DEFAULT_INPUT_BUFFER_COUNT (OMX_H264VE_MIN_INPUT_BUFFER_COUNT)

/* Default Framerate */
#define OMX_H264VE_DEFAULT_FRAME_RATE (15)

/* Default Intra Frame Interval */
#define OMX_H264VE_DEFAULT_INTRAFRAME_INTERVAL (OMX_H264VE_DEFAULT_FRAME_RATE)

/* Default MaxIntra Frame Interval */
#define OMX_H264VE_DEFAULT_MAXINTRAFRAME_INTERVAL (0x7FFFFFFF)

/* Default Bitrate */
#define  OMX_H264VE_DEFAULT_BITRATE (64000)

/*Default Frame Width */
#define OMX_H264VE_DEFAULT_FRAME_WIDTH (176)

/* Default Frame Height */
#define OMX_H264VE_DEFAULT_FRAME_HEIGHT (144)

/* Max Frame width */
#define OMX_H264VE_MAX_FRAME_WIDTH (1920)

/* Max Frame Height */
#define OMX_H264VE_MAX_FRAME_HEIGHT (1088)

/* Max Inter Frame Interval */
#define OMX_H264VE_MAX_INTER_FRAME_INTERVAL (OMX_H264VE_DEFAULT_INTERFRAME_INTERVAL)

/* deafult input buffer size */
#define OMX_H264VE_DEFAULT_INPUT_BUFFER_SIZE (OMX_H264VE_DEFAULT_FRAME_WIDTH * OMX_H264VE_DEFAULT_FRAME_HEIGHT * 3 / 2)

/* deafult output buffer size */
#define OMX_H264VE_DEFAULT_OUTPUT_BUFFER_SIZE (OMX_H264VE_DEFAULT_FRAME_WIDTH * OMX_H264VE_DEFAULT_FRAME_HEIGHT * 3 / 2)
/* Assuming encoded frame size will not exceed this size*/

/* deafult Aspect Ratio Height */
#define OMX_H264VE_DEFAULT_ASPECT_RATIO_HEIGHT (1)

/* deafult Aspect Ratio Width */
#define OMX_H264VE_DEFAULT_ASPECT_RATIO_WIDTH (1)

/* default Qp Settings for I frame */
#define OMX_H264VE_DEFAULT_QP_IFRAME (28)
#define OMX_H264VE_DEFAULT_QPMAX_IFRAME (36)
#define OMX_H264VE_DEFAULT_QPMIN_IFRAME (10)

/* default Qp Settings for P frame */
#define OMX_H264VE_DEFAULT_QP_PFRAME (28)
#define OMX_H264VE_DEFAULT_QPMAX_PFRAME (40)
#define OMX_H264VE_DEFAULT_QPMIN_PFRAME (10)

/* default Qp Settings for B frame */
#define OMX_H264VE_DEFAULT_QPOFFSET_BFRAME (4)
#define OMX_H264VE_DEFAULT_QPMAX_BFRAME (44)
#define OMX_H264VE_DEFAULT_QPMIN_BFRAME (10)

/* default Qp Settings for Chroma */
#define OMX_H264VE_DEFAULT_QPOFFSET_CHROMA (0)

/* default Search Range for P */
#define OMX_H264VE_DEFAULT_HORSEARCH_PFRAME (144)
#define OMX_H264VE_DEFAULT_VERSEARCH_PFRAME (32)

/* default Search Range for B */
#define OMX_H264VE_DEFAULT_HORSEARCH_BFRAME (144)
#define OMX_H264VE_DEFAULT_VERSEARCH_BFRAME (16)

/* default Min and Max Pic Size Ratio. Enables Codec to to chose ratio */
#define OMX_H264VE_DEFAULT_MINPICSIZERATIO     (0)
#define OMX_H264VE_DEFAULT_MAXPICSIZERATIOI    (20) // codec default is 640 in Q5 format
#define OMX_H264VE_DEFAULT_MAXPICSIZERATIOP    (0)
#define OMX_H264VE_DEFAULT_MAXPICSIZERATIOB    (0)

/* the header size SPS+PPS */
#define SPS_PPS_HEADER_DATA_SIZE 0x100

/* The PARAMS_UPDATE_STATUS enum represents the status of the setconfig call.
* With respect to a process call there are 3 possibilities:
* 1. No params have been changed(no setconfig call has occured)
* 2. Setconfig call has occured but the modified params have not been updated to the codec
*    It has been updated only at Ducati
* 3. Setconfig call has occured and the modified params have been updated to the codec
*/
typedef enum PARAMS_UPDATE_STATUS {
    NO_PARAM_CHANGE = 0,
    PARAMS_UPDATED_AT_OMX = 1,
    PARAMS_UPDATED_AT_CODEC = 2,
    PARAMS_UPDATE_STATUS_MAX = 0x7FFFFFFF
} PARAMS_UPDATE_STATUS;

/* inline functions */
#define GET_OMX_RC_ALG(_pCompPvtStruct_, _pParamStruct_, _e_) \
    if((_pCompPvtStruct_->pVidEncStaticParams->rateControlParams.rcAlgo == IH264_RATECONTROL_PRC) && (_pCompPvtStruct_->pVidEncStaticParams->rateControlParams.allowFrameSkip == OMX_FALSE)) { \
        ((OMX_VIDEO_PARAM_BITRATETYPE *)_pParamStruct_)->eControlRate   = OMX_Video_ControlRateVariable;\
        _e_=OMX_ErrorNone;\
    } else if((_pCompPvtStruct_->pVidEncStaticParams->rateControlParams.rcAlgo == IH264_RATECONTROL_PRC_LOW_DELAY) && (_pCompPvtStruct_->pVidEncStaticParams->rateControlParams.allowFrameSkip == OMX_FALSE)) { \
        ((OMX_VIDEO_PARAM_BITRATETYPE *)_pParamStruct_)->eControlRate   = OMX_Video_ControlRateConstant;\
        _e_=OMX_ErrorNone;\
    }

#define SET_H264CODEC_RC_ALG(_pParamStruct_, _pCompPvtStruct_, _e_) \
    if(((OMX_VIDEO_PARAM_BITRATETYPE *)_pParamStruct_)->eControlRate == OMX_Video_ControlRateVariable ) { \
        _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.rcAlgo         = IH264_RATECONTROL_PRC;\
        _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.allowFrameSkip = OMX_FALSE;\
        _e_=OMX_ErrorNone;\
    } else if(((OMX_VIDEO_PARAM_BITRATETYPE *)_pParamStruct_)->eControlRate == OMX_Video_ControlRateConstant ) { \
        _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.rcAlgo         = IH264_RATECONTROL_PRC_LOW_DELAY;\
        _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.allowFrameSkip = OMX_FALSE;\
        _e_=OMX_ErrorNone;\
    } else {\
        _e_=OMX_ErrorUnsupportedSetting;\
    }

#define GET_OMX_AVC_PARAMS(_pCompPvtStruct_, _pParamStruct_) \
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nSliceHeaderSpacing = 0; /* present code doesn't use this value: set to 0 */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nPFrames = (_pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.intraFrameInterval);\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nBFrames = ((_pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.interFrameInterval) - 1);\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bUseHadamard = OMX_TRUE; /* Set to OMX_TRUE According to the Spec BUT it is not being Used by the component */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nRefFrames = 1; /* According to the Spec BUT present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nRefIdx10ActiveMinus1 = 1; /* According to Codec Support (2 ref frames for B frame Encoding)but present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nRefIdx11ActiveMinus1 = 1; /* According to Codec Support (2 ref frames for B frame Encoding)but present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bEnableUEP = OMX_FALSE; /* present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bEnableFMO = (((_pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.fmoCodingPreset) == IH264_FMOCODING_NONE) ? OMX_FALSE : OMX_TRUE);\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bEnableASO = OMX_FALSE; /* present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bEnableRS = OMX_FALSE; /* present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nAllowedPictureTypes = 3; /* present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bFrameMBsOnly = OMX_TRUE; /* present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bMBAFF = ((_pCompPvtStruct_->pVidEncStaticParams->interlaceCodingType == IH264_INTERLACE_MBAFF) ? OMX_TRUE : OMX_FALSE); /* present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bEntropyCodingCABAC = ((_pCompPvtStruct_->pVidEncStaticParams->entropyCodingMode == IH264_ENTROPYCODING_CABAC) ? OMX_TRUE : OMX_FALSE);\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bWeightedPPrediction = OMX_FALSE; /* present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nWeightedBipredicitonMode = OMX_FALSE; /* present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bconstIpred = (((_pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.constrainedIntraPredEnable) == 0) ? OMX_FALSE : OMX_TRUE);\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bDirect8x8Inference = OMX_FALSE; /* present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bDirectSpatialTemporal = OMX_FALSE; /* present code doesn't use this value */\
    ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nCabacInitIdc = 0; /* present code doesn't use this value */


#define SET_H264CODEC_PARAMS_FROM_AVC(_pParamStruct_, _pCompPvtStruct_) \
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.intraFrameInterval = ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nPFrames;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.maxInterFrameInterval = (((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nBFrames + 1);\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.interFrameInterval = (((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->nBFrames + 1);\
    _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.fmoCodingPreset = ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bEnableFMO;\
    _pCompPvtStruct_->pVidEncStaticParams->entropyCodingMode = ((((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bEntropyCodingCABAC) ? IH264_ENTROPYCODING_CABAC : IH264_ENTROPYCODING_CAVLC);\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.constrainedIntraPredEnable = ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bconstIpred;\
    _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.constrainedIntraPredEnable = ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->bconstIpred;\
    if( _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.constrainedIntraPredEnable ) {\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraCodingPreset = IH264_INTRACODING_USERDEFINED;\
    }

#define GET_OMX_AVC_PROFILE(_pCompPvtStruct_, _pParamStruct_, _e_)\
    switch( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile ) {\
        case IH264_BASELINE_PROFILE :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eProfile = OMX_VIDEO_AVCProfileBaseline;\
        break;\
        case IH264_MAIN_PROFILE :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eProfile = OMX_VIDEO_AVCProfileMain;\
        break;\
        case IH264_HIGH_PROFILE :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eProfile = OMX_VIDEO_AVCProfileHigh;\
        break;\
        case IH264_EXTENDED_PROFILE :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eProfile = OMX_VIDEO_AVCProfileExtended;\
        break;\
        case IH264_HIGH10_PROFILE :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eProfile = OMX_VIDEO_AVCProfileHigh10;\
        break;\
        case IH264_HIGH422_PROFILE :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eProfile = OMX_VIDEO_AVCProfileHigh422;\
        break;\
        default :\
            _e_= OMX_ErrorNoMore;\
        break;\
    }

#define SET_H264CODEC_PROFILE(_pParamStruct_, _pCompPvtStruct_, _e_) \
    switch(((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eProfile ) {\
        case OMX_VIDEO_AVCProfileBaseline :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile = IH264_BASELINE_PROFILE;\
            _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.scalingMatrixPreset = IH264_SCALINGMATRIX_NONE;\
            _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.scalingMatrixPreset = IH264_SCALINGMATRIX_NONE;\
            _pCompPvtStruct_->pVidEncStaticParams->constraintSetFlags = OMX_H264_SET_CONSTRAINT_SET1_FLAG;\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.maxInterFrameInterval = OMX_H264VE_BASELINE_INTERFRAME_INTERVAL;\
            _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.interFrameInterval = OMX_H264VE_BASELINE_INTERFRAME_INTERVAL;\
            _pCompPvtStruct_->pVidEncStaticParams->entropyCodingMode = IH264_ENTROPYCODING_CAVLC;\
            _pCompPvtStruct_->pVidEncStaticParams->transformBlockSize = IH264_TRANSFORM_4x4;\
        break;\
        case OMX_VIDEO_AVCProfileMain :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile =IH264_MAIN_PROFILE;\
            _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.scalingMatrixPreset = IH264_SCALINGMATRIX_NONE;\
            _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.scalingMatrixPreset = IH264_SCALINGMATRIX_NONE;\
            _pCompPvtStruct_->pVidEncStaticParams->constraintSetFlags  = OMX_H264_DISBALE_ALL_CONSTRAINT_SET_FLAGS;\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.maxInterFrameInterval = OMX_H264VE_DEFAULT_INTERFRAME_INTERVAL;\
            _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.interFrameInterval = OMX_H264VE_DEFAULT_INTERFRAME_INTERVAL;\
            _pCompPvtStruct_->pVidEncStaticParams->entropyCodingMode   = IH264_ENTROPYCODING_CABAC;\
            _pCompPvtStruct_->pVidEncStaticParams->transformBlockSize   = IH264_TRANSFORM_4x4;\
        break;\
        case OMX_VIDEO_AVCProfileHigh :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile=IH264_HIGH_PROFILE;\
            _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.scalingMatrixPreset = IH264_SCALINGMATRIX_NORMAL;\
            _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.scalingMatrixPreset = IH264_SCALINGMATRIX_NORMAL;\
            _pCompPvtStruct_->pVidEncStaticParams->constraintSetFlags  = OMX_H264_DISBALE_ALL_CONSTRAINT_SET_FLAGS;\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.maxInterFrameInterval = OMX_H264VE_DEFAULT_INTERFRAME_INTERVAL;\
            _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.interFrameInterval = OMX_H264VE_DEFAULT_INTERFRAME_INTERVAL;\
            _pCompPvtStruct_->pVidEncStaticParams->entropyCodingMode   = IH264_ENTROPYCODING_CABAC;\
            _pCompPvtStruct_->pVidEncStaticParams->transformBlockSize   = IH264_TRANSFORM_ADAPTIVE;\
        break;\
            case OMX_VIDEO_AVCProfileExtended :\
            case OMX_VIDEO_AVCProfileHigh10 :\
            case OMX_VIDEO_AVCProfileHigh422 :\
        default :\
            _e_= OMX_ErrorUnsupportedSetting;\
        break;\
    }


#define GET_OMX_AVC_LEVEL(_pCompPvtStruct_, _pParamStruct_, _e_)\
    switch( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level ) {\
        case IH264_LEVEL_10 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel1;\
        break;\
        case IH264_LEVEL_1b :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel1b;\
        break;\
        case IH264_LEVEL_11 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel11;\
        break;\
        case IH264_LEVEL_12 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel12;\
        break;\
        case IH264_LEVEL_13 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel13;\
        break;\
        case IH264_LEVEL_20 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel2;\
        break;\
        case IH264_LEVEL_21 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel21;\
        break;\
        case IH264_LEVEL_22 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel22;\
        break;\
        case IH264_LEVEL_30 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel3;\
        break;\
        case IH264_LEVEL_31 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel31;\
        break;\
        case IH264_LEVEL_32 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel32;\
        break;\
        case IH264_LEVEL_40 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel4;\
        break;\
        case IH264_LEVEL_41 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel41;\
        break;\
        case IH264_LEVEL_42 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel42;\
        break;\
        case IH264_LEVEL_50 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel5;\
        break;\
        case IH264_LEVEL_51 :\
            ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel = OMX_VIDEO_AVCLevel51;\
        break;\
        default :\
            _e_= OMX_ErrorNoMore;\
        break;\
    }

#define SET_H264CODEC_LEVEL(_pParamStruct_, _pCompPvtStruct_, _e_)\
    switch(((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLevel ) {\
        case OMX_VIDEO_AVCLevel1 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_10;\
        break;\
        case OMX_VIDEO_AVCLevel1b :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_1b;\
        break;\
        case OMX_VIDEO_AVCLevel11 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_11;\
        break;\
        case  OMX_VIDEO_AVCLevel12 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_12;\
        break;\
        case OMX_VIDEO_AVCLevel13 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_13;\
        break;\
        case OMX_VIDEO_AVCLevel2 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_20;\
        break;\
        case OMX_VIDEO_AVCLevel21 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_21;\
        break;\
        case OMX_VIDEO_AVCLevel22 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_22;\
        break;\
        case OMX_VIDEO_AVCLevel3 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_30;\
        break;\
        case OMX_VIDEO_AVCLevel31 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_31;\
        break;\
        case OMX_VIDEO_AVCLevel32 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_32;\
        break;\
        case OMX_VIDEO_AVCLevel4 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_40;\
        break;\
        case OMX_VIDEO_AVCLevel41 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_41;\
        break;\
        case OMX_VIDEO_AVCLevel42 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_42;\
        break;\
        case OMX_VIDEO_AVCLevel5 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_50;\
        break;\
        case OMX_VIDEO_AVCLevel51 :\
            _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_51;\
        break;\
        default :\
            _e_= OMX_ErrorUnsupportedSetting;\
        break;\
    }

#define GET_OMX_AVC_LFMODE(_pCompPvtStruct_, _pParamStruct_, _e_)\
    if((_pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterDisableIDC == IH264_DISABLE_FILTER_NONE) || (_pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterDisableIDC == IH264_DISABLE_FILTER_DEFAULT)) {\
        ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLoopFilterMode = OMX_VIDEO_AVCLoopFilterEnable;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterDisableIDC == IH264_DISABLE_FILTER_ALL_EDGES ) {\
        ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLoopFilterMode = OMX_VIDEO_AVCLoopFilterDisable;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterDisableIDC == IH264_DISABLE_FILTER_SLICE_EDGES ) {\
        ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLoopFilterMode = OMX_VIDEO_AVCLoopFilterDisableSliceBoundary;\
    } else {\
        ((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLoopFilterMode = OMX_VIDEO_AVCLoopFilterMax;\
        _e_= OMX_ErrorNoMore;\
    }


#define SET_H264CODEC_LFMODE(_pParamStruct_, _pCompPvtStruct_, _e_)\
    if(((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLoopFilterMode == OMX_VIDEO_AVCLoopFilterEnable ) {\
        _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterDisableIDC = IH264_DISABLE_FILTER_NONE;\
    } else if(((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLoopFilterMode == OMX_VIDEO_AVCLoopFilterDisable ) {\
        _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterDisableIDC = IH264_DISABLE_FILTER_ALL_EDGES;\
        _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterPreset = 1;\
    } else if(((OMX_VIDEO_PARAM_AVCTYPE *)_pParamStruct_)->eLoopFilterMode == OMX_VIDEO_AVCLoopFilterDisableSliceBoundary ) {\
        _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterDisableIDC = IH264_DISABLE_FILTER_SLICE_EDGES;\
        _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterPreset = 1;\
    } else {\
        _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterDisableIDC = IH264_DISABLE_FILTER_MAX;\
        _e_= OMX_ErrorUnsupportedSetting;\
    }

#define GET_OMX_FMO_SLIGRPMAPTYPE(_pCompPvtStruct_, _pParamStruct_, _e_)\
    if( _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType == IH264_INTERLEAVED_SLICE_GRP ) {\
        ((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType = 0;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType == IH264_DISPERSED_SLICE_GRP ) {\
        ((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType = 1;\
    } else if((_pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType == IH264_SLICE_GRP_MAP_DEFAULT) || (_pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType == IH264_RASTER_SCAN_SLICE_GRP)) {\
        ((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType = 2;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType == IH264_FOREGRND_WITH_LEFTOVER_SLICE_GRP ) {\
        ((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType = 3;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType == IH264_BOX_OUT_SLICE_GRP ) {\
        ((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType = 4;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType == IH264_WIPE_SLICE_GRP ) {\
        ((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType = 5;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType == IH264_EXPLICIT_SLICE_GRP ) {\
        ((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType = 6;\
    } else {\
        _e_= OMX_ErrorNoMore;\
    }

#define SET_H264CODEC_FMO_SLIGRPMAPTYPE(_pParamStruct_, _pCompPvtStruct_, _e_)\
    if(((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType == 0 ) {\
        _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType = IH264_INTERLEAVED_SLICE_GRP;\
    } else if(((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType == 1 ) {\
        _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType = IH264_DISPERSED_SLICE_GRP;\
    } else if(((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType == 2 ) {\
        _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType = IH264_RASTER_SCAN_SLICE_GRP;\
    } else if(((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType == 3 ) {\
        _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType = IH264_FOREGRND_WITH_LEFTOVER_SLICE_GRP;\
    } else if(((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType == 4 ) {\
        _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType = IH264_BOX_OUT_SLICE_GRP;\
    } else if(((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType == 5 ) {\
        _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType = IH264_WIPE_SLICE_GRP;\
    } else if(((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->nSliceGroupMapType == 6 ) {\
        _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType = IH264_EXPLICIT_SLICE_GRP;\
    } else {\
        _e_= OMX_ErrorUnsupportedSetting;\
    }

#define GET_OMX_FMO_SLICEMODE(_pCompPvtStruct_, _pParamStruct_, _e_)\
    if((_pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceMode == IH264_SLICEMODE_NONE) || (_pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceMode == IH264_SLICEMODE_DEFAULT)) {\
        ((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->eSliceMode = OMX_VIDEO_SLICEMODE_AVCDefault;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceMode == IH264_SLICEMODE_MBUNIT ) {\
        ((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->eSliceMode = OMX_VIDEO_SLICEMODE_AVCMBSlice;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceMode == IH264_SLICEMODE_BYTES ) {\
        ((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->eSliceMode = OMX_VIDEO_SLICEMODE_AVCByteSlice;\
    } else {\
        _e_= OMX_ErrorNoMore;\
    }

#define SET_H264CODEC_SLICEMODE(_pParamStruct_, _pCompPvtStruct_, _e_)\
    if(((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->eSliceMode == OMX_VIDEO_SLICEMODE_AVCDefault ) {\
        _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceMode = IH264_SLICEMODE_DEFAULT;\
    } else if(((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->eSliceMode == OMX_VIDEO_SLICEMODE_AVCMBSlice ) {\
        _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceMode = IH264_SLICEMODE_MBUNIT;\
        _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceCodingPreset=1;\
    } else if(((OMX_VIDEO_PARAM_AVCSLICEFMO *)_pParamStruct_)->eSliceMode == OMX_VIDEO_SLICEMODE_AVCByteSlice ) {\
        _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceMode = IH264_SLICEMODE_BYTES;\
        _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceCodingPreset = 1;\
    } else {\
        _e_= OMX_ErrorUnsupportedSetting;\
    }

#define GET_OMX_INTRAREFRESHMODE(_pCompPvtStruct_, _pParamStruct_, _e_)\
    if((_pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshMethod == IH264_INTRAREFRESH_NONE) || (_pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshMethod == IH264_INTRAREFRESH_DEFAULT) || (_pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshMethod == IH264_INTRAREFRESH_MAX)) {\
        ((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->eRefreshMode = OMX_VIDEO_IntraRefreshMax;\
        ((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->nAirMBs = 0;\
        ((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->nAirRef = 0;\
        ((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->nCirMBs = 0;\
    } else if( _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshMethod == IH264_INTRAREFRESH_CYCLIC_MBS ) {\
        ((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->eRefreshMode = OMX_VIDEO_IntraRefreshAdaptive;\
        ((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->nAirMBs = ((_pCompPvtStruct_->sBase.pPorts[OMX_H264VE_INPUT_PORT]->sPortDef.format.video.nFrameWidth) * (_pCompPvtStruct_->sBase.pPorts[OMX_H264VE_INPUT_PORT]->sPortDef.format.video.nFrameHeight)) /  ((_pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshRate) * 256);\
        ((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->nAirRef = 0;\
        ((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->nCirMBs = 0;\
    } else {\
        _e_= OMX_ErrorNoMore;\
    }

#define SET_H264CODEC_INTRAREFRESHMODE(_pParamStruct_, _pCompPvtStruct_, _e_)\
    if(((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->eRefreshMode == OMX_VIDEO_IntraRefreshAdaptive ) {\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraCodingPreset = IH264_INTRACODING_USERDEFINED;\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraRefreshMethod = IH264_INTRAREFRESH_CYCLIC_MBS;\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraRefreshRate = ((_pCompPvtStruct_->sBase.pPorts[OMX_H264VE_INPUT_PORT]->sPortDef.format.video.nFrameWidth) * (_pCompPvtStruct_->sBase.pPorts[OMX_H264VE_INPUT_PORT]->sPortDef.format.video.nFrameHeight)) / (((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->nAirMBs * 256);\
        _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshMethod = IH264_INTRAREFRESH_CYCLIC_MBS;\
        _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshRate = _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraRefreshRate;\
    } else if(((OMX_VIDEO_PARAM_INTRAREFRESHTYPE *)_pParamStruct_)->eRefreshMode == OMX_VIDEO_IntraRefreshMax ) {\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraCodingPreset = IH264_INTRACODING_USERDEFINED;\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraRefreshMethod = IH264_INTRAREFRESH_NONE;\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraRefreshRate = 0;\
        _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshMethod = IH264_INTRAREFRESH_NONE;\
        _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshRate = 0;\
    } else {\
        _e_= OMX_ErrorUnsupportedSetting;\
    }


/*Set the Codec Chroma Format*/
#define GET_OMX_COLORFORMAT(_pCompPvtStruct_, _e_)\
    if((_pCompPvtStruct_->pVidEncStaticParams->videnc2Params.inputChromaFormat == XDM_YUV_420SP)) {\
        _pCompPvtStruct_->sBase.pPorts[OMX_H264VE_INPUT_PORT]->sPortDef.format.video.eColorFormat = OMX_TI_COLOR_FormatYUV420PackedSemiPlanar;\
    } else {\
        _e_ = OMX_ErrorNoMore; }

#define SET_H264CODEC_CHROMAFORMAT(_pPortdefStruct_, _pCompPvtStruct_, _e_)\
    if((_pPortdefStruct_->format.video.eColorFormat) == OMX_TI_COLOR_FormatYUV420PackedSemiPlanar ||\
    (_pPortdefStruct_->format.video.eColorFormat) == OMX_COLOR_FormatAndroidOpaque) {\
        _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.inputChromaFormat = XDM_YUV_420SP;\
    } else {\
        _e_= OMX_ErrorUnsupportedSetting; }


#define SET_H264CODEC_DEFAULT_IVIDENC2_PARAMS(_pCompPvtStruct_, _i_)\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.size = sizeof(IH264ENC_Params);\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.encodingPreset = XDM_USER_DEFINED;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.rateControlPreset = IVIDEO_USER_DEFINED;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.maxHeight = OMX_H264VE_DEFAULT_FRAME_HEIGHT;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.maxWidth = OMX_H264VE_DEFAULT_FRAME_WIDTH;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.dataEndianness = XDM_BYTE;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.maxBitRate                    = -1;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.minBitRate                    = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.inputChromaFormat = XDM_YUV_420SP;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.inputContentType = IVIDEO_PROGRESSIVE;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.operatingMode = IVIDEO_ENCODE_ONLY;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile = IH264_HIGH_PROFILE;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.level = IH264_LEVEL_42;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.maxInterFrameInterval =OMX_H264VE_MAX_INTER_FRAME_INTERVAL;\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile == IH264_BASELINE_PROFILE ) {\
        _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.maxInterFrameInterval = OMX_H264VE_BASELINE_INTERFRAME_INTERVAL;\
    }\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.inputDataMode = IVIDEO_ENTIREFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.outputDataMode = IVIDEO_ENTIREFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.numInputDataUnits = 1;\
    _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.numOutputDataUnits = 1;\
    for( _i_ = 0; _i_ < IVIDEO_MAX_NUM_METADATA_PLANES; _i_++ ) {\
        _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.metadataType[_i_] = IVIDEO_METADATAPLANE_NONE;\
    }


#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_RATECONTROLPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.rateControlParamsPreset=IH264_RATECONTROLPARAMS_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.scalingMatrixPreset = IH264_SCALINGMATRIX_NORMAL;\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile != IH264_HIGH_PROFILE ) {\
        _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.scalingMatrixPreset = IH264_SCALINGMATRIX_NONE;\
    }\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.rcAlgo    = IH264_RATECONTROL_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.qpI  = OMX_H264VE_DEFAULT_QP_IFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.qpMaxI  = OMX_H264VE_DEFAULT_QPMAX_IFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.qpMinI  = OMX_H264VE_DEFAULT_QPMIN_IFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.qpP      =  OMX_H264VE_DEFAULT_QP_PFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.qpMaxP =  OMX_H264VE_DEFAULT_QPMAX_PFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.qpMinP  =  OMX_H264VE_DEFAULT_QPMIN_PFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.qpOffsetB  = OMX_H264VE_DEFAULT_QPOFFSET_BFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.qpMaxB    =  OMX_H264VE_DEFAULT_QPMAX_BFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.qpMinB     =  OMX_H264VE_DEFAULT_QPMIN_BFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.allowFrameSkip = OMX_FALSE;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.removeExpensiveCoeff   = OMX_FALSE;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.chromaQPIndexOffset  = OMX_H264VE_DEFAULT_QPOFFSET_CHROMA;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.IPQualityFactor    =   IH264_QUALITY_FACTOR_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.HRDBufferSize   =  OMX_H264VE_DEFAULT_BITRATE;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.initialBufferLevel     = pH264VEComp->pVidEncStaticParams->rateControlParams.HRDBufferSize;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.minPicSizeRatioI   =  OMX_H264VE_DEFAULT_MINPICSIZERATIO;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.maxPicSizeRatioI   =  OMX_H264VE_DEFAULT_MAXPICSIZERATIOI;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.minPicSizeRatioP   =  OMX_H264VE_DEFAULT_MINPICSIZERATIO;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.maxPicSizeRatioP   =  OMX_H264VE_DEFAULT_MAXPICSIZERATIOP;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.minPicSizeRatioB   =  OMX_H264VE_DEFAULT_MINPICSIZERATIO;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.maxPicSizeRatioB   =  OMX_H264VE_DEFAULT_MAXPICSIZERATIOB;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.enablePRC   =  1;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.enablePartialFrameSkip   =  0;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.discardSavedBits   =  0;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.reserved = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.VBRDuration   =  8;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.VBRsensitivity   =  0;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.skipDistributionWindowLength = 5;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.numSkipInDistributionWindow  = 1;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.enableHRDComplianceMode   = 1;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.frameSkipThMulQ5 = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.vbvUseLevelThQ5 = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.reservedRC[0]    = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.reservedRC[1]   = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->rateControlParams.reservedRC[2]   = 0;

#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_INTERCODINGPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.interCodingPreset=IH264_INTERCODING_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.searchRangeHorP =  OMX_H264VE_DEFAULT_HORSEARCH_PFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.searchRangeVerP =  OMX_H264VE_DEFAULT_VERSEARCH_PFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.searchRangeHorB  =  OMX_H264VE_DEFAULT_HORSEARCH_BFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.searchRangeVerB   =  OMX_H264VE_DEFAULT_VERSEARCH_BFRAME;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.interCodingBias   =  IH264_BIASFACTOR_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.skipMVCodingBias = IH264_BIASFACTOR_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.minBlockSizeP    =  IH264_BLOCKSIZE_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.minBlockSizeB    =  IH264_BLOCKSIZE_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.meAlgoMode    =  IH264ENC_MOTIONESTMODE_DEFAULT;


#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_INTRACODINGPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraCodingPreset    = IH264_INTRACODING_DEFAULT;\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile != IH264_HIGH_PROFILE ) {\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.lumaIntra4x4Enable = 0x0FF;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.inputContentType == IVIDEO_PROGRESSIVE ) {\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.lumaIntra4x4Enable = 0x0;\
    } else {\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.lumaIntra4x4Enable = 0x1F;\
    }\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile != IH264_HIGH_PROFILE ) {\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.lumaIntra8x8Enable  = 0x0;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.inputContentType == IVIDEO_PROGRESSIVE ) {\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.lumaIntra8x8Enable  = 0x0FF;\
    } else {\
        _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.lumaIntra8x8Enable  = 0x01F;\
    }\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.lumaIntra16x16Enable = 0xF;\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.chromaIntra8x8Enable = 0xF;\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.chromaComponentEnable = IH264_CHROMA_COMPONENT_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraRefreshMethod   = IH264_INTRAREFRESH_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraRefreshRate  = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.gdrOverlapRowsBtwFrames  = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.constrainedIntraPredEnable = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->intraCodingParams.intraCodingBias = IH264ENC_INTRACODINGBIAS_DEFAULT;

#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_NALUCONTROLPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->nalUnitControlParams.naluControlPreset    =      IH264_NALU_CONTROL_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->nalUnitControlParams.naluPresentMaskStartOfSequence= 0x01A0;\
    _pCompPvtStruct_->pVidEncStaticParams->nalUnitControlParams.naluPresentMaskIDRPicture  = 0x01A0;\
    _pCompPvtStruct_->pVidEncStaticParams->nalUnitControlParams.naluPresentMaskIntraPicture= 0x0002;\
    _pCompPvtStruct_->pVidEncStaticParams->nalUnitControlParams.naluPresentMaskNonIntraPicture= 0x0002;\
    _pCompPvtStruct_->pVidEncStaticParams->nalUnitControlParams.naluPresentMaskEndOfSequence= 0x0C00;\

#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_SLICECODINGPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceCodingPreset       =        IH264_SLICECODING_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceMode         = IH264_SLICEMODE_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceUnitSize     = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceStartOffset[0] = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceStartOffset[1] = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.sliceStartOffset[2] = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->sliceCodingParams.streamFormat   = IH264_STREAM_FORMAT_DEFAULT;

#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_LOOPFILTERPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterPreset         =      IH264_LOOPFILTER_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.loopfilterDisableIDC  = IH264_DISABLE_FILTER_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.filterOffsetA        = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->loopFilterParams.filterOffsetB        = 0;

#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_FMOCODINGPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.fmoCodingPreset           =    IH264_FMOCODING_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.numSliceGroups                 = 1;\
    _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupMapType             = IH264_SLICE_GRP_MAP_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupChangeDirectionFlag = IH264ENC_SLICEGROUP_CHANGE_DIRECTION_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupChangeRate           = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupChangeCycle          = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupParams[0] = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->fmoCodingParams.sliceGroupParams[1] = 0;

#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_VUICODINGPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->vuiCodingParams.vuiCodingPreset           =    IH264_VUICODING_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->vuiCodingParams.aspectRatioInfoPresentFlag = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->vuiCodingParams.aspectRatioIdc             = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->vuiCodingParams.videoSignalTypePresentFlag = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->vuiCodingParams.videoFormat           = IH264ENC_VIDEOFORMAT_NTSC;\
    _pCompPvtStruct_->pVidEncStaticParams->vuiCodingParams.videoFullRangeFlag          = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->vuiCodingParams.timingInfoPresentFlag = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->vuiCodingParams.hrdParamsPresentFlag = XDAS_FALSE;\
    _pCompPvtStruct_->pVidEncStaticParams->vuiCodingParams.numUnitsInTicks = 1000;

#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_STEREOINFOPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->stereoInfoParams.stereoInfoPreset = IH264_STEREOINFO_DISABLE;\
    _pCompPvtStruct_->pVidEncStaticParams->stereoInfoParams.topFieldIsLeftViewFlag = 1;\
    _pCompPvtStruct_->pVidEncStaticParams->stereoInfoParams.viewSelfContainedFlag = 0;

#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_STEREOFRAMEPACKINGPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->framePackingSEIParams.framePackingPreset = IH264_FRAMEPACK_SEI_DISABLE;\
    _pCompPvtStruct_->pVidEncStaticParams->framePackingSEIParams.framePackingType = IH264_FRAMEPACK_TYPE_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->framePackingSEIParams.frame0PositionX = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->framePackingSEIParams.frame0PositionY = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->framePackingSEIParams.frame1PositionX = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->framePackingSEIParams.frame1PositionY = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->framePackingSEIParams.reservedByte = 0;

#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_SVCCODINGPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->svcCodingParams.svcExtensionFlag = IH264_SVC_EXTENSION_FLAG_DISABLE;\
    _pCompPvtStruct_->pVidEncStaticParams->svcCodingParams.dependencyID = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->svcCodingParams.qualityID = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->svcCodingParams.enhancementProfileID = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->svcCodingParams.layerIndex = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->svcCodingParams.refLayerDQId = 0;

#define SET_H264CODEC_DEFAULT_STATIC_IH264ENC_EXTENDEDPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->interlaceCodingType = IH264_INTERLACE_FIELDONLY_ARF;\
    _pCompPvtStruct_->pVidEncStaticParams->bottomFieldIntra = OMX_FALSE;\
    _pCompPvtStruct_->pVidEncStaticParams->gopStructure        = IH264ENC_GOPSTRUCTURE_DEFAULT;\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile == IH264_BASELINE_PROFILE ) {\
        _pCompPvtStruct_->pVidEncStaticParams->entropyCodingMode   = IH264_ENTROPYCODING_CAVLC;\
    } else {\
        _pCompPvtStruct_->pVidEncStaticParams->entropyCodingMode   = IH264_ENTROPYCODING_CABAC;\
    }\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile == IH264_HIGH_PROFILE ) {\
        _pCompPvtStruct_->pVidEncStaticParams->transformBlockSize  = IH264_TRANSFORM_ADAPTIVE;\
    } else {\
        _pCompPvtStruct_->pVidEncStaticParams->transformBlockSize  = IH264_TRANSFORM_4x4;\
    }\
    _pCompPvtStruct_->pVidEncStaticParams->log2MaxFNumMinus4   = 10;\
    _pCompPvtStruct_->pVidEncStaticParams->picOrderCountType   = IH264_POC_TYPE_DEFAULT;\
    _pCompPvtStruct_->pVidEncStaticParams->maxIntraFrameInterval = OMX_H264VE_DEFAULT_MAXINTRAFRAME_INTERVAL;\
    _pCompPvtStruct_->pVidEncStaticParams->enableWatermark      = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->IDRFrameInterval     = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->pConstantMemory = NULL;\
    _pCompPvtStruct_->pVidEncStaticParams->debugTraceLevel = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->lastNFramesToLog = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->enableAnalyticinfo = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->enableGMVSei = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->constraintSetFlags = OMX_H264_DISBALE_ALL_CONSTRAINT_SET_FLAGS;\
    _pCompPvtStruct_->pVidEncStaticParams->enableRCDO = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->enableLongTermRefFrame = IH264ENC_LTRP_NONE;\
    _pCompPvtStruct_->pVidEncStaticParams->LTRPPeriod = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->numTemporalLayer = IH264_TEMPORAL_LAYERS_1;\
    _pCompPvtStruct_->pVidEncStaticParams->referencePicMarking = IH264_LONG_TERM_PICTURE;\
    _pCompPvtStruct_->pVidEncStaticParams->reservedParams[0]    = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->reservedParams[1]   = 0;\
    _pCompPvtStruct_->pVidEncStaticParams->reservedParams[2]   = 0;

#define OVERWRITE_H264CODEC_DEFAULT_STATIC_PARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->nalUnitControlParams.naluControlPreset = IH264_NALU_CONTROL_USERDEFINED;\
    _pCompPvtStruct_->pVidEncStaticParams->nalUnitControlParams.naluPresentMaskIDRPicture  = 0x0020;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.interCodingPreset= IH264_INTERCODING_USERDEFINED;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.skipMVCodingBias = IH264_BIASFACTOR_MILD;\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile == IH264_BASELINE_PROFILE ) {\
        _pCompPvtStruct_->pVidEncStaticParams->constraintSetFlags  = OMX_H264_SET_CONSTRAINT_SET1_FLAG;\
    }

#define ENABLE_4MV(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.interCodingPreset = IH264_INTERCODING_USERDEFINED;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.minBlockSizeP    =  IH264_BLOCKSIZE_8x8;\
    _pCompPvtStruct_->pVidEncStaticParams->interCodingParams.minBlockSizeB    =  IH264_BLOCKSIZE_8x8;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.minBlockSizeP   =  IH264_BLOCKSIZE_8x8;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.minBlockSizeB   =  IH264_BLOCKSIZE_8x8;

#define SET_H264CODEC_DEFAULT_IVIDENC2_DYNAMICPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.size  = sizeof(IH264ENC_DynamicParams);\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.inputHeight = OMX_H264VE_DEFAULT_FRAME_HEIGHT;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.inputWidth  = OMX_H264VE_DEFAULT_FRAME_WIDTH;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.refFrameRate   = (OMX_H264VE_DEFAULT_FRAME_RATE) * 1000;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.targetFrameRate = (OMX_H264VE_DEFAULT_FRAME_RATE) * 1000;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.targetBitRate = OMX_H264VE_DEFAULT_BITRATE;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.intraFrameInterval = OMX_H264VE_DEFAULT_INTRAFRAME_INTERVAL;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.generateHeader = XDM_GENERATE_HEADER;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.ignoreOutbufSizeFlag = XDAS_TRUE;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.captureWidth = OMX_H264VE_DEFAULT_FRAME_WIDTH;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.forceFrame     = IVIDEO_NA_FRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.interFrameInterval = OMX_H264VE_DEFAULT_INTERFRAME_INTERVAL;\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile == IH264_BASELINE_PROFILE ) {\
        _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.interFrameInterval = OMX_H264VE_BASELINE_INTERFRAME_INTERVAL;\
    }\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.mvAccuracy       = IVIDENC2_MOTIONVECTOR_QUARTERPEL;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.sampleAspectRatioHeight = OMX_H264VE_DEFAULT_ASPECT_RATIO_HEIGHT;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.sampleAspectRatioWidth = OMX_H264VE_DEFAULT_ASPECT_RATIO_WIDTH;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.putDataFxn = NULL;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.putDataHandle = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.getDataFxn = NULL;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.getDataHandle = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.getBufferFxn = NULL;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.getBufferHandle = NULL;\
    _pCompPvtStruct_->pVidEncDynamicParams->videnc2DynamicParams.lateAcquireArg = -1;


#define SET_H264CODEC_DEFAULT_DYNAMIC_RATECONTROLPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.rateControlParamsPreset = IH264_RATECONTROLPARAMS_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.scalingMatrixPreset = IH264_SCALINGMATRIX_NORMAL;\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile != IH264_HIGH_PROFILE ) {\
        _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.scalingMatrixPreset = IH264_SCALINGMATRIX_NONE;\
    }\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.rcAlgo    = IH264_RATECONTROL_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.qpI  = OMX_H264VE_DEFAULT_QP_IFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.qpMaxI  = OMX_H264VE_DEFAULT_QPMAX_IFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.qpMinI  = OMX_H264VE_DEFAULT_QPMIN_IFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.qpP      =  OMX_H264VE_DEFAULT_QP_PFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.qpMaxP =  OMX_H264VE_DEFAULT_QPMAX_PFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.qpMinP  =  OMX_H264VE_DEFAULT_QPMIN_PFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.qpOffsetB  = OMX_H264VE_DEFAULT_QPOFFSET_BFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.qpMaxB    =  OMX_H264VE_DEFAULT_QPMAX_BFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.qpMinB     =  OMX_H264VE_DEFAULT_QPMIN_BFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.allowFrameSkip = OMX_FALSE;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.removeExpensiveCoeff   = OMX_FALSE;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.chromaQPIndexOffset  = OMX_H264VE_DEFAULT_QPOFFSET_CHROMA;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.IPQualityFactor    =   IH264_QUALITY_FACTOR_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.HRDBufferSize   =  OMX_H264VE_DEFAULT_BITRATE;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.initialBufferLevel     = pH264VEComp->pVidEncDynamicParams->rateControlParams.HRDBufferSize;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.minPicSizeRatioI   =  OMX_H264VE_DEFAULT_MINPICSIZERATIO;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.maxPicSizeRatioI   =  OMX_H264VE_DEFAULT_MAXPICSIZERATIOI;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.minPicSizeRatioP   =  OMX_H264VE_DEFAULT_MINPICSIZERATIO;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.maxPicSizeRatioP   =  OMX_H264VE_DEFAULT_MAXPICSIZERATIOP;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.minPicSizeRatioB   =  OMX_H264VE_DEFAULT_MINPICSIZERATIO;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.maxPicSizeRatioB   =  OMX_H264VE_DEFAULT_MAXPICSIZERATIOB;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.enablePRC   =  1;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.enablePartialFrameSkip   =  0;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.discardSavedBits   =  0;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.reserved = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.VBRDuration   =  8;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.VBRsensitivity   =  0;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.skipDistributionWindowLength = 5;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.numSkipInDistributionWindow   =  1;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.enableHRDComplianceMode   =  1;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.frameSkipThMulQ5 = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.vbvUseLevelThQ5 = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.reservedRC[0]    = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.reservedRC[1]   = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->rateControlParams.reservedRC[2]   = 0;


#define SET_H264CODEC_DEFAULT_DYNAMIC_INTERCODINGPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.interCodingPreset = IH264_INTERCODING_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.searchRangeHorP   = OMX_H264VE_DEFAULT_HORSEARCH_PFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.searchRangeVerP   = OMX_H264VE_DEFAULT_VERSEARCH_PFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.searchRangeHorB   = OMX_H264VE_DEFAULT_HORSEARCH_BFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.searchRangeVerB   = OMX_H264VE_DEFAULT_VERSEARCH_BFRAME;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.interCodingBias   = IH264_BIASFACTOR_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.skipMVCodingBias  = IH264_BIASFACTOR_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.minBlockSizeP     = IH264_BLOCKSIZE_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.minBlockSizeB     = IH264_BLOCKSIZE_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.meAlgoMode        = IH264ENC_MOTIONESTMODE_DEFAULT;


#define SET_H264CODEC_DEFAULT_DYNAMIC_INTRACODINGPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraCodingPreset    = IH264_INTRACODING_DEFAULT;\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile != IH264_HIGH_PROFILE ) {\
        _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.lumaIntra4x4Enable = 0x0FF;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.inputContentType == IVIDEO_PROGRESSIVE ) {\
        _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.lumaIntra4x4Enable = 0x0;\
    } else {\
        _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.lumaIntra4x4Enable = 0x1F;\
    }\
    if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.profile != IH264_HIGH_PROFILE ) {\
        _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.lumaIntra8x8Enable  = 0x0;\
    } else if( _pCompPvtStruct_->pVidEncStaticParams->videnc2Params.inputContentType == IVIDEO_PROGRESSIVE ) {\
        _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.lumaIntra8x8Enable  = 0x0FF;\
    } else {\
        _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.lumaIntra8x8Enable  = 0x01F;\
    }\
    _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.lumaIntra16x16Enable = 0xF;\
    _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.chromaIntra8x8Enable = 0xF;\
    _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.chromaComponentEnable = IH264_CHROMA_COMPONENT_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshMethod   = IH264_INTRAREFRESH_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraRefreshRate  = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.gdrOverlapRowsBtwFrames  = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.constrainedIntraPredEnable = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->intraCodingParams.intraCodingBias = IH264ENC_INTRACODINGBIAS_DEFAULT;


#define SET_H264CODEC_DEFAULT_DYNAMIC_SLICECODINGPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncDynamicParams->sliceCodingParams.sliceCodingPreset =  IH264_SLICECODING_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->sliceCodingParams.sliceMode         = IH264_SLICEMODE_DEFAULT;\
    _pCompPvtStruct_->pVidEncDynamicParams->sliceCodingParams.sliceUnitSize     = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->sliceCodingParams.sliceStartOffset[0] = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->sliceCodingParams.sliceStartOffset[1] = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->sliceCodingParams.sliceStartOffset[2] = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->sliceCodingParams.streamFormat   = IH264_STREAM_FORMAT_DEFAULT;


#define SET_H264CODEC_DEFAULT_DYNAMIC_IH264_EXTENDEDPARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncDynamicParams->sliceGroupChangeCycle = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->searchCenter.x = 0x7FFF;\
    _pCompPvtStruct_->pVidEncDynamicParams->searchCenter.y = 0x7FFF;\
    _pCompPvtStruct_->pVidEncDynamicParams->enableStaticMBCount = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->enableROI = 0;\
    _pCompPvtStruct_->pVidEncDynamicParams->reservedDynParams[0] = 0;

#define OVERWRITE_H264CODEC_DEFAULT_DYNAMIC_PARAMS(_pCompPvtStruct_)\
    _pCompPvtStruct_->pVidEncDynamicParams->interCodingParams.skipMVCodingBias = IH264_BIASFACTOR_MILD;


#define MAP_CODEC_TO_OMX_AVCLEVEL(_InCodecLevel_, _OutOMXLevel_, _nIndex_, _e_)\
    switch( _InCodecLevel_ ) {\
        case IH264_LEVEL_10 :\
            _OutOMXLevel_ = OMX_VIDEO_AVCLevel1;\
            _nIndex_ = 0;\
        break;\
        case IH264_LEVEL_1b :\
            _OutOMXLevel_ = OMX_VIDEO_AVCLevel1b;\
            _nIndex_ = 1;\
        break;\
        case IH264_LEVEL_11 :\
            _OutOMXLevel_ = OMX_VIDEO_AVCLevel11;\
            _nIndex_ = 2;\
        break;\
        case IH264_LEVEL_12 :\
            _OutOMXLevel_= OMX_VIDEO_AVCLevel12;\
            _nIndex_ = 3;\
        break;\
        case IH264_LEVEL_13 :\
            _OutOMXLevel_ = OMX_VIDEO_AVCLevel13;\
            _nIndex_ = 4;\
        break;\
        case IH264_LEVEL_20 :\
            _OutOMXLevel_= OMX_VIDEO_AVCLevel2;\
            _nIndex_ = 5;\
        break;\
        case IH264_LEVEL_21 :\
            _OutOMXLevel_=OMX_VIDEO_AVCLevel21;\
            _nIndex_ = 6;\
        break;\
        case IH264_LEVEL_22 :\
            _OutOMXLevel_= OMX_VIDEO_AVCLevel22;\
            _nIndex_ = 7;\
        break;\
        case IH264_LEVEL_30 :\
            _OutOMXLevel_= OMX_VIDEO_AVCLevel3;\
            _nIndex_ = 8;\
        break;\
        case IH264_LEVEL_31 :\
            _OutOMXLevel_= OMX_VIDEO_AVCLevel31;\
            _nIndex_ = 9;\
        break;\
        case IH264_LEVEL_32 :\
            _OutOMXLevel_= OMX_VIDEO_AVCLevel32;\
            _nIndex_ = 10;\
        break;\
        case IH264_LEVEL_40 :\
            _OutOMXLevel_= OMX_VIDEO_AVCLevel4;\
            _nIndex_ = 11;\
        break;\
        case IH264_LEVEL_41 :\
            _OutOMXLevel_ = OMX_VIDEO_AVCLevel41;\
            _nIndex_ = 12;\
        break;\
        case IH264_LEVEL_42 :\
            _OutOMXLevel_ = OMX_VIDEO_AVCLevel42;\
            _nIndex_ = 13;\
        break;\
        case IH264_LEVEL_50 :\
            _OutOMXLevel_= OMX_VIDEO_AVCLevel5;\
            _nIndex_ = 14;\
        break;\
        case IH264_LEVEL_51 :\
            _OutOMXLevel_= OMX_VIDEO_AVCLevel51;\
            _nIndex_ = 15;\
        break;\
        default :\
            _e_= OMX_ErrorNoMore;\
            _nIndex_ = 0xFFFFFFFF;\
        break;\
    }

/* Error mapping b/n XDM and OMX */
#define OMX_TI_GET_ERROR(_pCompPvtStruct_, _x_, _e_) \
    _e_ = OMX_ErrorUndefined; \
    if( XDM_ISFATALERROR(_x_)) { /*bit 15*/\
        _e_ = OMX_ErrorUndefined;\
        OSAL_ErrorTrace("Undefined From Codec");\
    }\
    if(((_x_) >> IH264ENC_LEVEL_INCOMPLAINT_PARAMETER) & 0x1 ) { /*bit 0*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Level Incompliant Param Setting");\
    }\
    if(((_x_) >> IH264ENC_PROFILE_INCOMPLAINT_CONTENTTYPE) & 0x1 ) { /*bit 1*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Profile Incompliant Content type(progressive/Interlace) Setting");\
    }\
    if(((_x_) >> IH264ENC_PROFILE_INCOMPLAINT_FMO_SETTING) & 0x1 ) { /*bit 2*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Profile Incompliant FMO Param Setting");\
    }\
    if(((_x_) >> IH264ENC_PROFILE_INCOMPLAINT_TRANSFORMBLOCKSIZE) & 0x1 ) { /*bit 3*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Profile Incompliant Transform Block Size Setting");\
    }\
    if(((_x_) >> IH264ENC_PROFILE_INCOMPLAINT_INTERFRAMEINTERVAL) & 0x1 ) { /*bit 4*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Profile Incompliant IntraFrame Interval Setting");\
    }\
    if(((_x_) >> IH264ENC_PROFILE_INCOMPLAINT_SCALINGMATRIXPRESET) & 0x1 ) { /*bit 5*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Profile Incompliant Scaling Matrix Setting");\
    }\
    if(((_x_) >> IH264ENC_PROFILE_INCOMPLAINT_ENTROPYCODINGMODE) & 0x1 ) { /*bit 6*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Profile Incompliant Entropy Coding Setting");\
        OSAL_ErrorTrace("_or_ Due to violation of slice size (crossing the limit)");\
    }\
    if(((_x_) >> IH264ENC_MAX_BIT_RATE_VOILATION) & 0x1 ) { /*bit 7*/\
        _e_ = OMX_ErrorOverflow;\
        OSAL_ErrorTrace("Max bits for one Unit (1 sec) Voilation");\
    }\
    if(((_x_) >> IH264ENC_IMPROPER_HDVICP2_STATE) & 0x1 ) { /*bit 16*/\
        _e_ = OMX_ErrorHardware;\
        OSAL_ErrorTrace("IVAHD Device is not proper state to use");\
    }\
    if(((_x_) >> IH264ENC_IMPROPER_STREAMFORMAT) & 0x1 ) { /*bit 17*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due To Improper StreamFormat");\
    }\
    if(((_x_) >> IH264ENC_IMPROPER_POCTYPE) & 0x1 ) { /*bit 18*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to InCorrect POC Type");\
    }\
    if(((_x_) >> IH264ENC_IMPROPER_DATASYNC_SETTING) & 0x1 ) { /*bit 19*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Imprper DataSync Settings");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_VIDENC2PARAMS) & 0x1 ) { /*bit 20*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due To Unsupported Videnc2 Params");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_RATECONTROLPARAMS) & 0x1 ) { /*bit 21*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due To Unsupported Rate Control Params");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_INTERCODINGPARAMS) & 0x1 ) { /*bit 22*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Unsupported Intercoding Params");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_INTRACODINGPARAMS) & 0x1 ) { /*bit 23*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Unsupported Intracoding Params");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_NALUNITCONTROLPARAMS) & 0x1 ) { /*bit 24*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Unsupported NALControl Params");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_SLICECODINGPARAMS) & 0x1 ) { /*bit 25*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Unsupported Slicecoding Params");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_LOOPFILTERPARAMS) & 0x1 ) { /*bit 26*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Unsupported LoopFilter Params");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_FMOCODINGPARAMS) & 0x1 ) { /*bit 27*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Unsupported FMOCoding Params or");\
        OSAL_ErrorTrace("DATASYNC::No of NALs in 1Kb of data is more than 8/ insufficient memory blocks or");\
        OSAL_ErrorTrace("Due to Unsupported setting in N frame process call scenario");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_VUICODINGPARAMS) & 0x1 ) { /*bit 28*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Unsupported VUIcoding Params");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_H264ENCPARAMS) & 0x1 ) { /*bit 29*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Unsupported H264ENC Params");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_VIDENC2DYNAMICPARAMS) & 0x1 ) { /*bit 30*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Unsupported VIDENC2DYNAMIC Params");\
    }\
    if(((_x_) >> IH264ENC_UNSUPPORTED_H264ENCDYNAMICPARAMS) & 0x1 ) { /*bit 31*/\
        _e_ = OMX_ErrorUnsupportedSetting;\
        OSAL_ErrorTrace("Due to Unsupported H264ENCDYNAMIC Params");\
    }\
    if( XDM_ISUNSUPPORTEDPARAM(_x_)) { /*bit 14*/\
        _e_ = OMX_ErrorBadParameter;\
        OSAL_ErrorTrace("Due to UnSupported Parameter");\
    }\
    if( XDM_ISUNSUPPORTEDINPUT(_x_)) { /*bit 13*/\
        _e_ = OMX_ErrorBadParameter;\
        OSAL_ErrorTrace("Due to Unsupported Input");\
    }\
    if( XDM_ISCORRUPTEDHEADER(_x_)) { /*bit 12*/\
        _e_ = OMX_ErrorStreamCorrupt;\
        OSAL_ErrorTrace("Due to Corrupt Header");\
    }\
    if( XDM_ISCORRUPTEDDATA(_x_)) { /*bit 11*/\
        _e_ = OMX_ErrorStreamCorrupt;\
        OSAL_ErrorTrace("Due to Corrupted Data");\
    }\
    if( XDM_ISINSUFFICIENTDATA(_x_)) { /*bit 10*/\
        _e_ = OMX_ErrorInsufficientResources;\
        OSAL_ErrorTrace("Due to Insufficient Data");\
    }

/* Internal functions */
OMX_ERRORTYPE OMXH264VE_InitFields(OMX_HANDLETYPE hComponent);

OMX_ERRORTYPE OMXH264VE_InitialzeComponentPrivateParams(OMX_HANDLETYPE hComponent);

OMX_ERRORTYPE OMXH264VE_SetAlgDefaultCreationParams(OMX_HANDLETYPE pHandle);

OMX_ERRORTYPE OMXH264VE_SetAlgDefaultDynamicParams(OMX_HANDLETYPE pHandle);

OMX_ERRORTYPE OMXH264VE_SetBufferDesc(OMX_HANDLETYPE pHandle, OMX_U32 nPortIndex);

OMX_ERRORTYPE OMXH264VE_SetEncCodecReady(OMX_HANDLETYPE hComponent);

OMX_ERRORTYPE OMXH264VE_UpdateParams(OMX_HANDLETYPE hComponent);

/* Buffer statemachine Related*/
OMX_ERRORTYPE OMXH264VE_FLUSHLockedBuffers(OMX_HANDLETYPE hComponent);
OMX_ERRORTYPE OMXH264VE_GetNextFreeBufHdr(OMX_HANDLETYPE hComponent, OMX_S32 *nBuffIndex, OMX_U32 nPortIndex);
OMX_ERRORTYPE OMXH264VE_GetNumCodecLockedBuffers(OMX_HANDLETYPE hComponent, OMX_U32 *nLockedBuffCount);
OMX_ERRORTYPE OMXH264VE_SetDynamicParamsToCodec(OMX_HANDLETYPE hComponent);

OMX_ERRORTYPE OMXH264VE_VISACONTROL(VIDENC2_Handle handle, IVIDENC2_Cmd id, IVIDENC2_DynamicParams *dynParams,
                                                IVIDENC2_Status *status, OMX_HANDLETYPE hComponent, XDAS_Int32 *retval);

OMX_ERRORTYPE OMXH264VE_VISAPROCESS_AND_UPDATEPARAMS(OMX_HANDLETYPE hComponent, XDAS_Int32 *retval);

/* Functions to check the max bit rate supported as per profile & level  settings*/
OMX_ERRORTYPE OMXH264VE_CheckBitRateCap(OMX_U32 targetBitRate, OMX_HANDLETYPE hComponent);

